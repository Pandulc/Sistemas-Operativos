Sistemas Operativos - Practico - Threads ( Hilos )
--------------------------------------------------

Objetivo: Manejo de hilos. Uso de POSIX Threads

Referencias:
a- https://computing.llnl.gov/tutorials/pthreads/
b- https://www.cs.cf.ac.uk/Dave/C/


1) Compile el ejemplo que crea 5 hilos, guarde en ht.c
Compile utilizando:

    $ gcc -Wall -pthread -o ht ht.c

---------------------------------------------------------
#include <pthread.h>
#include <stdio.h>
#include <stdlib.h>

#define NUM_THREADS     5

void *PrintHello(void *threadid)
{
   long tid;
   tid = (long)threadid;
   printf("Hello World! It's me, thread #%ld!\n", tid);
   pthread_exit(NULL);
}

int main (int argc, char *argv[])
{
   pthread_t threads[NUM_THREADS];
   int rc;
   int t;
   
   for( t = 0; t < NUM_THREADS; t++ ) {
      printf("In main: creating thread %ld\n", t);
      rc = pthread_create( &threads[t], NULL, PrintHello, (void *)t);
      if ( rc ) {
         printf("ERROR; return code from pthread_create() is %d\n", rc);
         exit(-1);
      }
   }

   /* Last thing that main() should do */
   pthread_exit(NULL);
}

Notas:
a) pthread_create crea el hilo, el primer argumento almacena el ID del Hilo,
el tercero indica cual es la función que ejecuta el hilo, el cuarto es el
[unico] argumento que podemos pasar al hilo.

b) Todos los hilos deben invocar pthread_exit al terminar.

2) Use 5 hilos para computar los 5 primeros términos de la serie de Fibonacci

0 1 1 2 3 5 8 13 ...
a_n = a_n-1 + a_n-2

Use una expresión no recursiva para la función de la serie.
Declare un arreglo común donde cada hilo debe almacenar elresultado.
Imprima el arreglo al finalizar

Piense de que modo 'sicronizar' al hilo principal, recuerde que las variables
globales son comunes.



